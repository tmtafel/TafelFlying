@model TafelFlyingServices.Models.Airport

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
<div class="row">
    <div class="col-md-4">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Airport</h4>
                <hr />
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                @Html.HiddenFor(model => model.Timezone)
                @Html.HiddenFor(model => model.TimezoneName)
                @Html.HiddenFor(model => model.DST)
                @*AirportId*@
                <div class="form-group">
                    @Html.LabelFor(model => model.AirportId, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.AirportId, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.AirportId, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*Name*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*City*@
                <div class="form-group">
                    @Html.LabelFor(model => model.City, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.City, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.City, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*Region*@
                <div class="form-group">
                    @Html.LabelFor(model => model.StateOrProvidence, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StateOrProvidence, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.StateOrProvidence, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*Country*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Country, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Country, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Country, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*Altitude*@
                <div class="form-group">
                    @Html.LabelFor(model => model.Altitude, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Altitude, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Altitude, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*Latitude*@
                <div class="hide">
                    @Html.LabelFor(model => model.Latitude, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Latitude, new {htmlAttributes = new {id = "latitude", @class = "form=control"}})
                        @Html.ValidationMessageFor(model => model.Latitude, "", new {@class = "text-danger"})
                    </div>
                </div>
                @*Longitude*@
                <div class="hide">
                    @Html.LabelFor(model => model.Longitude, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Longitude, new {htmlAttributes = new {id = "longitude", @class = "form=control"}})
                        @Html.ValidationMessageFor(model => model.Longitude, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
    <div class='col-md-8'>
        <div class="map-container"></div>
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script>
    $(document).ready(function() {

        $(".map-container").parent().addClass("create-plane");
        $(".map-container").GoogleMapEditor({
            editMode: true,
            markerPinsPath: "/Scripts/img/pin/",
            stylesPath: "//Scripts/styles.json",
            locations: [
                {
                    "Coordinates": [
                        {
                            "Latitude": @Model.Latitude,
                            "Longitude": @Model.Longitude,
                        }
                    ],
                    "Radius": 0,
                    "LocationType": "marker",
                    "Icon": "airport.png",
                    "Message": "(" + @Model.Latitude + " , " + @Model.Longitude + ")",
                    "Tag": null
                }
            ],
            center: { "latitude": @Model.Latitude, "longitude": @Model.Longitude },
            zoom: 12,
            zoomControl: true,
            panControl: true,
            scaleControl: false,
            streetViewControl: false,
            searchBox: false,
            richtextEditor: false,
            singleLocation: true,
            locationNew: function(sender, data) {
                $("#latitude").val(data.Coordinates[0].Latitude);
                $("#longitude").val(data.Coordinates[0].Longitude);
            }
        });
    });
</script>